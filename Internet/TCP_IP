这里主要讲TCP/IP协议的理论基础


TCP/IP是一个协议族，一共有五层，主动发送数据的是从上至下，接受数据是从下到上

这里我介绍一下这五层（从上到下）

第一层：应用层（合并了表示层，会话层和应用层）---应用层的作用就是将把你要传输的数据定为网络协议中规定的形式。由于数据要传输，格式必须一致，否则无法交流传输，而应用层就是做这个用的。应用层方面的协议非常的多，有HTTP，FTP，TELNET等。规定应用程序的数据格式。


第二层：传输层---你把数据发出去了，你是不是得知道对方是什么东西来接收？就比如你QQ的消息发出去了，你却在网页浏览器收到了信息。这样就不行，所以为了让两边的程序准确的接收到信息。我们在这传输层就必须做到端对端的连接。而这个端，就是端口。就比如HTTP网页，定义为80,那么我发送的时候，就是这个端口发，接受的时候也是这个端口来接。
而这个端对端的连接有两种协议UDP和TCP。SCTP暂时不考虑。UDP相对于TCP就没那么稳定，但是速度快。UDP是针对数据报，而tcp是针对数据流。这是什么意思呢，UDP呢也就是拉屎的时候，你拉的一坨干的，直接掉下去，你和坑没有连接，这坨屎就是数据报，可以看到这个你直接把屎拉进去，这个过程是很快的。但是不稳定，不稳定在哪呢，你把这屎直接拉坑外了怎么办？有没有补救措施？坑是不是能稳定的接收到这坨屎？这就是不稳定的地方，完全取决你屁股的能力。而数据流呢，这个例子不太好举，简单的说，就是建立了全双工(就是双向)的连接，拉屎就是单向的连接。
而TCP全双工的连接，由于数据里面头部带的东西很多，传输起来就不如UDP快，但是稳定。TCP里面有超时重传机制，建立连接的时候三次握手，所以保证了两端传输的稳定。在TCP每次发送数据的时候就会等待对面返回一个ACK确认收到数据，如果接收到对面ACK，则继续发送其他信息，如果在规定时间内没有收到就再次重传。但是如果每次发送数据都得收到ACK，是不是有点太慢了，不够实时呀。我发一次，你收到了，你再发给我确认，我收到确认再发一次。
这样的话效率太低，所以就有了滑动窗口，滑动窗口就是，我们两个连接之前我就定义了我这里有个缓存区，缓存区里面可以存放数据。然后连接之后你就知道了我的缓存区，你发数据可以一次把我的缓存区发满，然后再慢慢等我的ACK，等到我的ACK，再继续发， 这样效率就高一点。那你就想，如果当中有一段数据掉了怎么办？举个例子，如果A发送1-100的数据给B（滑动窗口==100），结果51这个数据丢了，那么B会先接受到你所有的数据，然后给你发送一个ACK51的确认报文，A收到了ACK51,明白51丢了，就从51开始重新发，又发了51-151的数据。到后来A没发送100,其中总有数据丢，然后B又让A重发其中一部分数据。B后来就有点不太满意了，你这败家玩意儿，你发这么快，我也接收不过来，没事就一直丢东西，我限制你一次只能发送50个，你给我发慢一点，数据别给我弄丢了，这里就将滑动窗口变成了50。（滑动窗口==50）这就叫做流量控制。
这里讲一点网络层的东西。但是有一个问题就是，A与B之间通信，还会经过其他的路由器链路层啥的，在这些地方很有可能造成堵塞或者过载。而这里就需要用到拥塞控制。
在建立连接时，不仅是A与B，会取到连接A与B所有的一个最小的拥塞窗口（Congestion window），然后在第一次发送的时候就要使用慢开始算法，开始的时候发送端自己设定了一个窗口---cwnd，开始发送的时候，cwnd=1,每收到一个ACK，cwnd+=1/cwnd。当过了一个RTT（超时的时间）后，如果一切正常，则cwnd=cwnd*2。这么成指数增长，是不是有点太快了。是的，一开始还好，到后面指数增长太快，很容易造成堵塞。所以我们规定了一个ssthresh。一旦cwnd超过了ssthresh（cwnd>ssthresh）后，我们就使用拥塞避免算法，这个算法很简单，就是线性增长，每过一个RTT，则cwnd=cwnd+1。这样拥塞控制就完成了。可是搞网络的几爷子觉得，不行，不够，不够好。所以有了快重传和快恢复。
在知道快重传之前，我们得先了解。如果超过RTT之后，没有收到ACK，那么发送方就得重传数据，并且使用慢启动算法从cwnd=1开始，且ssthresh变成1/2cwnd。这是属于非快重传的情况。
然后回到快重传，之前说过，接收方收到数据后会给返回方发送一个ACK来让对方知道自己接收了数据。但是在正常情况下，这个ACK是不会单独发出来的，他是跟数据一起发出来的。A给B发了一个数据，B收到后，B准备自己的数据，然后将ACK和数据一起准备好，就发送给A。但是在丢了数据的情况下，比如A发了1-10,而B却收到1-3,5-10。这时候就规定，在乱序的情况下，B必须马上把4这个ACK发出来。你不能再等着跟你的数据一起发出来了。这就是快重传。就是我在接受到A的数据为3时，B发了一个ACK（4），下个却收到了A发来的5,然后B再发一个ACK（4），A还是发了一个6,然后B再发一个ACK（4）。当发了三个ACK（4）后，发送方就得马上处理了。马上重传刚才的数据。而不要等待超时（RTT）没收到ACK（5）再重传数据。
快恢复其实就是算法，就是我连续收到三个重复ACK了，那说明网络情况还挺好的，因为我这ACK收到的很及时嘛（而且一收还是三个）。那么这时候重传数据就不能使用慢启动了，我们就直接使用拥塞避免算法，让cwnd=ssthresh然后进行线性增长。这样就减少了从1增长到ssthresh的这个过程。让传输数据变得更加快捷。


第三层：网络层---网络层的作用
网络层的作用就是逻辑地址寻址，实现不同网络之间的路径选择。我们都知道每一台电脑都有一个IP地址，这个IP地址呢，他不是固定的你发现没有。你会发现你在这个网络中是这个IP地址，在另外一个网络是另外一个ip地址。因为IP地址他是一个逻辑地址，他是每个网络给你分的一个主机地址。而网络层的作用就是在通过各个网络进行寻址，寻找到你要与之传输的那个网络逻辑地址，然后得到他的MAC地址，进行传输。


第四层：数据链路层（合并了数据链路层和物理层）
这个层次为数据加上一个以太网协议，并将数据包装成帧，为最后的数据作准备。以及物理层次的电缆，网卡的设定啥的。
